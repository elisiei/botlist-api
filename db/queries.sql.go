// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bots (author, name, description)
VALUES (?, ?, ?)
RETURNING id, author, name, description, created_at
`

type CreateBotParams struct {
	Author      int64
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (Bot, error) {
	row := q.db.QueryRowContext(ctx, createBot, arg.Author, arg.Name, arg.Description)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username)
VALUES (?)
RETURNING id, username, created_at
`

func (q *Queries) CreateUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const getBotByID = `-- name: GetBotByID :one
SELECT id, author, name, description, created_at FROM bots
WHERE id = ?
`

func (q *Queries) GetBotByID(ctx context.Context, id int64) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBotByID, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, created_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, created_at FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const listBotsByUserID = `-- name: ListBotsByUserID :many
SELECT id, author, name, description, created_at FROM bots
WHERE author = ?
ORDER BY created_at DESC
`

func (q *Queries) ListBotsByUserID(ctx context.Context, author int64) ([]Bot, error) {
	rows, err := q.db.QueryContext(ctx, listBotsByUserID, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bot
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, created_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
